<?php

namespace Hyper\DomainBundle\Repository\Client;

use Doctrine\ORM\EntityRepository;
use Hyper\Domain\Client\ClientRepository;
use Hyper\Domain\Client\Client;

/**
 * ClientRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DTClientRepository extends EntityRepository implements ClientRepository
{
    public function save(Client $client){
        $this->_em->persist($client);
    }

    public function completeTransaction(){
        $this->_em->flush();
    }

    public function findbyCriteria($field, $value)
    {
        $record = $this->findOneBy(array($field => $value));
        return $record;
    }

    public function getResultAndCount($page, $rpp)
    {
        //$countQuery = $this->createQueryBuilder('au')->select('count(au.id)')->where($where)->getQuery();
        $countQuery = $this->createQueryBuilder('au')->select('count(au.id)')->getQuery();
        $totalRows = $countQuery->getSingleScalarResult();

        // $query = $this->createQueryBuilder('au')->select('au')->where($where)->getQuery();
        $query = $this->createQueryBuilder('au')->select('au')->orderBy('au.created', 'DESC')->getQuery();
        $offset = $rpp*($page-1);
        $rows = $query->setFirstResult($offset)->setMaxResults($rpp)->getResult(\Doctrine\ORM\Query::HYDRATE_OBJECT);
        return array(
            'rows' => $rows,
            'total' => $totalRows
        );
    }

    public function deleteUser($id)
    {
        $user = $this->findOneBy(
            array('id' => $id)
         );

        $count = count($user);

        if($count > 0)
        {
            $qb = $this->_em->createQueryBuilder();
            $qb->delete('Hyper\Domain\Client\Client', 'a');
            $qb->andWhere($qb->expr()->eq('a.id', ':id'));
            $qb->setParameter(':id', $id);
            $qb->getQuery()->execute();

            return "success";
        }
        else
        {
            return "failed";
        }
    }

    public function updateClient($client_id, $client_name, $account_type, $app_id)
    {
        $client = $this->findOneBy(
            array('id' => $client_id)
         );

        $count = count($client);

        if($count > 0)
        {
            $client->setClientName("$client_name");
            $client->setAccountType("$account_type");
            $client->setClientApp("$app_id");
            $this->_em->flush();

            return "success";
        }
        else
        {
            return "failed";
        }
    }

    /**
     * return an array of client app ids from client ids
     */
    public function getClientAppsByIds(array $ids) {
        $qb = $this->createQueryBuilder('client');
        $query = $qb->select('client.client_app')
                    ->where($qb->expr()->in('client.id','?1'))
                    ->setParameter(1,$ids)->getQuery();
        $result = $query->getResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);

        $result = array_column($result,'client_app');

        $clientAppIds = implode(',',$result);

        $clientAppIds = array_unique(explode(',',$clientAppIds));

        return $clientAppIds;
    }

    public function getDistinctClient()
    {
        $qb = $this->createQueryBuilder('client');
        $query = $qb->select('DISTINCT client.client_name')->getQuery();
        $result = $query->getResult();

        return $result;
    }

    public function getClientByIds(array $ids, $return_field)
    {
        $qb = $this->createQueryBuilder('client');
        $query = $qb->select('client.' . "$return_field")
                    ->where($qb->expr()->in('client.id','?1'))
                    ->setParameter(1,$ids)->getQuery();
        $result = $query->getResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);

        $result = array_column($result,"$return_field");

        $clientAppIds = implode(',',$result);

        $clientAppIds = array_unique(explode(',',$clientAppIds));

        return $clientAppIds;
    }

    public function getListClientByIds(array $listIds)
    {
        if (!empty($listIds)) {
            $qb = $this->createQueryBuilder('c')
                ->select('c.id AS id, c.client_name AS clientName');
            $qb->where($qb->expr()->in('c.id', $listIds));

            return $qb->getQuery()->getResult();
        }

        return array();
    }

    public function getTotalClient()
    {
        $total = $this->createQueryBuilder('c')
                    ->select('COUNT(c.id) AS total')
                    ->getQuery()->getSingleScalarResult();

        return $total;
    }


    public function getAllClient()
    {
        $qb = $this->createQueryBuilder('client');
        $query = $qb->select('DISTINCT client')->getQuery();
        $result = $query->getResult();

        return $result;
    }

    public function getPaginateData(
        $pageNumber,
        $perpageNumber = 10,
        $searchterm = '',
        $sort = '',
        $direction = 'ASC'
    ) {
        $offset = $perpageNumber * ($pageNumber - 1);
        $qbTotal = $this->createQueryBuilder('c')
                        ->select('count(c.id)');
        $qb = $this->createQueryBuilder('c')
                    ->select('c')
                    ->setFirstResult($offset)
                    ->setMaxResults($perpageNumber);
        if ($sort) {
            $qb->orderBy($sort, strtoupper($direction));
        }
        $qb->addOrderBy('c.created', 'DESC');

        $rows = $qb->getQuery()
                    //->getSQL();
                    ->getArrayResult();
        //echo $rows;exit;

        $totalRows =  $qbTotal->getQuery()->getSingleScalarResult();

        return array(
            'rows' => $rows,
            'total' => $totalRows
        );
    }

}
