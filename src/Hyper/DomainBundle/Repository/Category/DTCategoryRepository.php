<?php

namespace Hyper\DomainBundle\Repository\Category;

use Doctrine\ORM\EntityRepository;
use Hyper\Domain\Category\CategoryRepository;
use Hyper\Domain\Category\Category;

/**
 * CategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DTCategoryRepository extends EntityRepository implements CategoryRepository
{
    public function save(Category $item){
        $this->_em->persist($item);
        //$this->_em->flush();
    }
    
    public function getByIdentifier($identifier){
        if (
            !array_key_exists('code',$identifier)
             ||
            !array_key_exists('app_id',$identifier)
        ) {
            throw new \Exception('invalid item identifier');
        }
        $item = $this->getByAppCode(
            $identifier['code'],
            $identifier['app_id']
        );
        return $item;
    }
    
    // $appId : id of application provided by client
    public function getByAppCode($code,$appId){
        return $this->findOneBy(
                    array(
                        'code' => $code,
                        'appId' => $appId
                    )
                );
    }
    
    public function completeTransaction(){
        //echo "flushing";
        $this->_em->flush();
        $this->_em->clear();
        //echo "flushed";
    }
    
    public function getAll()
    {
        $conn = $this->_em->getConnection();
        $stmt = $conn->prepare("SELECT * FROM categories WHERE name != '';");
        $stmt->execute();
        $result =$stmt->fetchAll();
        return $result;
    }
    
    public function getResultAndCount($page, $rpp)
    {
        //$countQuery = $this->createQueryBuilder('au')->select('count(au.id)')->where($where)->getQuery();
        $countQuery = $this->createQueryBuilder('au')->select('count(au.id)')->where("au.name != ''")->getQuery();
        $totalRows = $countQuery->getSingleScalarResult();

        // $query = $this->createQueryBuilder('au')->select('au')->where($where)->getQuery();
        $query = $this->createQueryBuilder('au')->select('au')->where("au.name != ''")->orderBy('au.parentId', 'ASC')->getQuery();
        $offset = $rpp*($page-1);
        $rows = $query->setFirstResult($offset)->setMaxResults($rpp)->getResult(\Doctrine\ORM\Query::HYDRATE_OBJECT);
        return array(
            'rows' => $rows,
            'total' => $totalRows
        );
    }
    
    public function getAjaxCodeByAppId($app_id)
    {
        $conn = $this->_em->getConnection();
        $stmt = $conn->prepare("SELECT DISTINCT id, code, app_id FROM categories WHERE app_id = '$app_id' AND name = '';");
        $stmt->execute();
        $result =$stmt->fetchAll();
        
        return $result;
    }
    
    public function updateCategoryTree($id = null, $app_id = null, $code = null, $name = null,  $parent_id, $mode)
    {
        
        if($mode == "Add")
        {
            $category = $this->findOneBy(
                array('id' => "$id", 'code' => "$code", "appId" => "$app_id")
            );
            
            $cnt = count($category);
            
            if($cnt > 0)
            {
                $category->setParentId("$parent_id");
                $category->setName("$name");
                $this->_em->flush();    
                
                return "success";
            }
            else
            {
                return "failed";
            }
        }
        elseif($mode == "Delete")
        {
            $category = $this->findOneBy(
                array('id' => "$id")
            );
        
            $count = count($category);
        
            if($count > 0)
            {
                $category->setParentId(0);
                $category->setName("");
                $this->_em->flush();    
                
                return "success";
            }
            else
            {
                return "failed";
            }
        }        
    }
    
    public function getActiveCategories(array $appIds =array()) {
        $categories = array();
        if (!empty($appIds)) {
            $inCategoryItems = $this->_em->getRepository('\Hyper\Domain\Item\InCategoryItem');
            $sqb = $inCategoryItems->createQueryBuilder('ici');
            $dql = $sqb->select('identity(ici.category)')
                        ->distinct()
                        ->getQuery()->getDQL();
            $qb = $this->createQueryBuilder('cat');
            $query = $qb->select('cat.name,cat.code,cat.id')
                        ->addSelect('(select distinct app.platform from \Hyper\Domain\Application\Application app where app.appId = cat.appId) as platform')
                        ->where($qb->expr()->andX(
                            $qb->expr()->in('cat.id',$dql),
                            $qb->expr()->in('cat.appId','?1')
                        ))
                        ->orderBy('cat.name','desc')
                        ->setParameter(1,$appIds)
                        ->getQuery();
            $categories = $query->getResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);            
            //\Doctrine\Common\Util\Debug::dump ($categories);           
                        
        }
        return $categories;
    }
    
}