<?php

namespace Hyper\DomainBundle\Repository\Promo;

use Doctrine\ORM\EntityRepository;
use Hyper\Domain\Promo\PromoRepository;
use Hyper\Domain\Promo\Promo;

/**
 * PromoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DTPromoRepository extends EntityRepository implements PromoRepository
{
    public function save(Promo $promo){
        $this->_em->persist($promo);
    }
    
    public function completeTransaction(){        
        $this->_em->flush();        
    }
    
    public function findbyCriteria($field, $value)
    {
        $record = $this->findOneBy(array($field => $value));
        return $record;
    }
    
    public function findByAppPlacement($app_name, $placement_name)
    {
        $data = $this->findOneBy(
            array('appName' => $app_name, 'placementName' => $placement_name),
            array('created' => 'DESC')
         );
         
         return $data;
    }
    
    public function getResultAndCount($page, $rpp)
    {
        $countQuery = $this->createQueryBuilder('pr')->select('count(pr.id)')->getQuery();
        $totalRows = $countQuery->getSingleScalarResult();

        $query = $this->createQueryBuilder('pr')->select('pr')->orderBy('pr.created', 'DESC')->getQuery();
        $offset = $rpp*($page-1);
        $rows = $query->setFirstResult($offset)->setMaxResults($rpp)->getResult(\Doctrine\ORM\Query::HYDRATE_OBJECT);
        return array(
            'rows' => $rows,
            'total' => $totalRows
        );
    }
    
    public function getLastRecord()
    {
        $query = $this->createQueryBuilder('promo')->select('promo')->orderBy('promo.created', 'DESC')->getQuery();
        $row = $query->setMaxResults(1)->getSingleResult(\Doctrine\ORM\Query::HYDRATE_OBJECT);
        return $row;
    }
    
    public function updateJsonFile($id, $json, $success, $fail, $callback, $update_time)
    {
        $user = $this->findOneBy(
            array('id' => $id)
        );
        
        $count = count($user);
        
        if($count > 0)
        {
            $user->setJsonFile("$json");
            $user->setSuccess($success);
            $user->setFail($fail);
            $user->setCallback("$callback");
            $user->setUpdated($update_time);
            $this->_em->flush();
            
            return "success";
        }        
        else
        {
            return "failed";
        }
    }
}