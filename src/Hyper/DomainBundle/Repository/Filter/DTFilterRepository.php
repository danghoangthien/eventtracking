<?php

namespace Hyper\DomainBundle\Repository\Filter;

use Doctrine\ORM\EntityRepository;
use Hyper\Domain\Filter\FilterRepository;
use Hyper\Domain\Filter\Filter;

/**
 * ApplicationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DTFilterRepository extends EntityRepository implements FilterRepository
{
    public function save(Filter $filter){
        $this->_em->persist($filter);
        //$this->_em->flush();
    }

    public function completeTransaction(){
        //echo "flushing";
        $this->_em->flush();
        $this->_em->clear();
        //echo "flushed";
    }

    public function getByIdentifier($authenticationId,$presetName){
        return $this->findOneBy(
            array(
                'presetName' => $presetName,
                'authenticationId' => $authenticationId
            )
        );
    }

    public function getAllByAuthenticationId($authenticationId){
        return $this->findBy(
            array(
                'authenticationId' => $authenticationId
            )
        );
    }

    public function getResultAndCount($page, $rpp, $authenticationId=null)
    {
        
        if($authenticationId == null) {
            $where = 'fi.created>0';
        } else {
            $where = "fi.created>0 and fi.authenticationId='".$authenticationId."'";
        }

        $countQuery = $this->createQueryBuilder('fi')->select('count(fi.id)')->where($where)->getQuery();
        //echo $countQuery->getSql();
        $totalRows = $countQuery->getSingleScalarResult();
        //echo "total rows:".$totalRows;

        $query = $this->createQueryBuilder('fi')->select('fi')->where($where)->getQuery();
        $offset = $rpp*($page-1);
        $sql = $query->setFirstResult($offset)->setMaxResults($rpp)->getSQL();
        $rows = $query->setFirstResult($offset)->setMaxResults($rpp)->getResult(\Doctrine\ORM\Query::HYDRATE_OBJECT);
        return array(
            'rows' => $rows,
            'total' => $totalRows

        );
    }

    public function deletePreset($id)
    {
        $preset = $this->findOneBy(
            array('id' => $id)
         );

        $count = count($preset);

        if($count > 0)
        {
            $qb = $this->_em->createQueryBuilder();
            $qb->delete('Hyper\Domain\Filter\Filter', 'a');
            $qb->andWhere($qb->expr()->eq('a.id', ':id'));
            $qb->setParameter(':id', $id);
            $qb->getQuery()->execute();

            return "success";
        }
        else
        {
            return "failed";
        }
    }

    public function getRecordForUpdate($id)
    {
        $selected_preset = $this->findOneBy(
            array('id' => $id)
        );

        return $selected_preset;
    }

    public function updateFilter($id, $authentication_id, $preset_name, $filterMetaData, $description, $is_default = 0)
    {
        $preset = $this->findOneBy(
            array('id' => $id)
        );

        if(count($preset) > 0)
        {
            $preset->setAuthenticationId($authentication_id);
            $preset->setPresetName($preset_name);
            $preset->setFilterMetadata($filterMetaData);
            $preset->setDescription($description);
            $preset->setIsDefault($is_default);

            $this->_em->flush();

            return "success";
        }
        else
        {
            return "Failed to update Record";
        }
    }

    public function getPaginateData(
        $authId,
        $pageNumber,
        $perpageNumber = 10
    ) {
        $qbTotal = $this->createQueryBuilder('f')
                        ->select('count(f.id)');

        $offset = $perpageNumber * ($pageNumber - 1);
        $qb = $this->createQueryBuilder('f')
                    ->select('f.id,f.description,f.presetName,f.filterData,f.cardBgColorCode,f.cardHighlightColorCode,f.cardTextColorCode')
                    ->setFirstResult($offset)
                    ->setMaxResults($perpageNumber);
        if ($authId) {
            $qbTotal->where('f.authenticationId = ?1')->setParameter(1, $authId);
            $qb->where('f.authenticationId = ?1')->setParameter(1, $authId);
        }

        $rows = $qb->getQuery()
                    //->getSQL();
                    ->getResult();
        //echo $rows;exit;

        $totalRows =  $qbTotal->getQuery()->getSingleScalarResult();

        return array(
            'rows' => $rows,
            'total' => $totalRows
        );
    }

    public function getListFilterByAuth($authId) {
        $qb = $this->createQueryBuilder('f')
                    ->select('f');
        $qb->where('f.authenticationId = ?1')->setParameter(1, $authId);

        $result = $qb->getQuery()
                    //->getSQL();
                    ->getArrayResult();

        return $result;
    }

    public function getByFilterAuth(
        $filterId,
        $authId
    )
    {
        $qb = $this->createQueryBuilder('f')
                ->select('f.id,f.presetName,f.description,f.filterData,f.cardBgColorCode,f.cardHighlightColorCode,f.cardTextColorCode')
                ->where('f.id = ?1')
                ->andWhere('f.authenticationId = ?2')
                ->setParameter(1, $filterId)
                ->setParameter(2, $authId);

        return $qb->getQuery()->getOneOrNullResult();
    }

    public function getFilterTotalCount()
    {
        $qb = $this->createQueryBuilder('f')
                        ->select('count(f.id)');
        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getFilterTotalCountByAuth($authId)
    {
        $qb = $this->createQueryBuilder('f')
                        ->select('count(f.id)')
                        ->where('f.authenticationId = ?1')
                        ->setParameter(1, $authId);
        return $qb->getQuery()->getSingleScalarResult();
    }

    public function getFiterByLimit($limit, $offset)
    {
        $qb = $this->createQueryBuilder('f')
            ->select('f.id')
            ->setFirstResult($offset)
            ->setMaxResults($limit)
            ->orderBy('f.created','DESC');

        return $rows = $qb->getQuery()
                    //->getSQL();
                    ->getResult();
    }

    public function getRecentFilter($authId, $limit)
    {
        $qb = $this->createQueryBuilder('f')
                ->select('f.id,f.presetName,f.description,f.filterData,f.cardBgColorCode,f.cardHighlightColorCode,f.cardTextColorCode')
                ->where('f.authenticationId = ?1')
                ->setFirstResult(0)
                ->setMaxResults($limit)
                ->setParameter(1, $authId)
                ->orderBy('f.created','DESC');

        return $qb->getQuery()
                    //->getSQL();
                    ->getResult();
    }
}