<?php

namespace Hyper\DomainBundle\Repository\Item;

use Doctrine\ORM\EntityRepository;
use Hyper\Domain\Item\ItemRepository;
use Hyper\Domain\Item\Item;
use Hyper\Domain\Category\Category;

/**
 * ItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DTItemRepository extends EntityRepository implements ItemRepository
{
    public function save(Item $item){
        $this->_em->persist($item);
        //$this->_em->flush();
    }
    
    public function getByIdentifier($identifier) {
         if (
            !array_key_exists('code',$identifier) || 
            !array_key_exists('application_id',$identifier)
        ) {
            throw new \Exception('invalid item identifier');
        }
        $item = $this->getByApplicationCode(
            $identifier['code'],
            $identifier['application_id']
        );
        return $item;
    }
    
    public function getByApplicationCode($code,$applicationId){
        return $this->findOneBy(
                    array(
                        'code' => $code,
                        'application' => $applicationId
                    )
                );
    }
    
    public function getMetadataByApplicationIds($applicationIds){
        $results = null;
        if (count($applicationIds)>0){
            $inApplicationIds = implode("','",$applicationIds);
            
            $where = "item.application IN ('".$inApplicationIds."')";
            $where = "item.application IN ('55d30c036bdc82.87706959')";
            echo $where;
            $query = $this->createQueryBuilder('item')->select('item')->where($where)->getQuery();
            //print_r($query);
            $results = $query->getResult(\Doctrine\ORM\Query::HYDRATE_OBJECT);
        }
        return $results;
    }
    
    public function getCategoryIdentifiers() {
        $categoryIdentifiers = array();
        $itemsInCategory = array();
        //where id NOT in select item_id from in_category_item
        $inCategoryItemRepository = $this->_em->getRepository('Hyper\Domain\Item\InCategoryItem');
          
        $subQuery = $inCategoryItemRepository->createQueryBuilder('ici')->select('ici.itemCode')->distinct();
        $query = $this->createQueryBuilder('item');
        $query = $query->select('item')
        ->distinct('item.metadata')
        ->where($query->expr()->notIn('item.code', $subQuery->getDQL()))
        ->getQuery();
        $iterableResult = $query->iterate();
        foreach ($iterableResult as $row) {
            //var_dump($row);die;
            $item = $row[0];
            $metadata = $item->getMetadata();
            $metadata = json_decode($metadata,true);
            if(!isset($metadata['af_content_type'])){
                // implement audit log
                continue;
            }
            $code = $metadata['af_content_type'];
            
            $categoryRepository = $this->_em->getRepository('Hyper\Domain\Category\Category');
            $application =  $item->getApplication();
            $appId = $application->getAppId();
            $categoryIdentifiers[] = array(
                'code' => $code,
                'app_id'=> $appId,
            );
            $itemsInCategory[] = array(
                'item_code' => $item->getCode(),
                'code' => $code,
                'app_id'=> $appId,
            );
            $this->_em->detach($row[0]);
            $this->_em->detach($item);
            unset($row);
        }
        // echo "cat identifier ".count($categoryIdentifiers);
        // echo "item in category ".count($itemInCategory);
        $categoryIdentifiers = array_unique($categoryIdentifiers,SORT_REGULAR);
        $itemsInCategory = array_unique($itemsInCategory,SORT_REGULAR);
        // echo "<br/> unique cat identifier ".count($categoryIdentifiers);
        // echo "<br/> unique item in category ".count($itemInCategory);
        return array(
            'category_identifiers' => $categoryIdentifiers,
            'items_in_category' => $itemsInCategory
        );
        
    }
    
}