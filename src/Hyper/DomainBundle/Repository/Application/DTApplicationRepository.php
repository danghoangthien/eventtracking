<?php

namespace Hyper\DomainBundle\Repository\Application;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;

use Hyper\Domain\Application\ApplicationRepository;
use Hyper\Domain\Application\Application;


/**
 * ApplicationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DTApplicationRepository extends EntityRepository implements ApplicationRepository
{
    public function save(Application $application){
        $this->_em->persist($application);
        //$this->_em->flush();
    }

    public function getByIdentifier(array $identifier) {
        if (
             !array_key_exists('app_id',$identifier) ||
             !array_key_exists('app_name',$identifier) ||
             !array_key_exists('app_version',$identifier)
        ){
            throw new \Exception('invalid identifier');
        }
        $application = $this->getByAppInfo(
            $identifier['app_id'],
            $identifier['app_name'],
            $identifier['app_version']
        );
        return $application;
    }

    public function getByAppInfo($appId,$appName,$appVersion){
        return $this->findOneBy(
            array(
                'appId' => $appId,
                'appName' => $appName,
                'appVersion' => $appVersion
            )
        );
    }

    public function getAllByLatestVersion(){
       /**
        * select * from applications ap
        * where created = (select max(created) from applications where app_id = ap.app_id) ;
        */
        $rsm = new ResultSetMapping();
        // build rsm here

        //$query = $this->_em->createNativeQuery('select * from applications ap where created = (select max(created) from applications where app_id = ap.app_id)', $rsm);
        $connection = $this->_em->getConnection();
        $stmt = $connection->prepare('select id from applications ap where created = (select max(created) from applications where app_id = ap.app_id)');
        $stmt->execute();
        $result =$stmt->fetchAll();
        return $result;
        //var_dump($result);die;
    }

    public function getApplicationByAppIds(array $appIds) {
        $qb = $this->createQueryBuilder('app');
        $result = $qb->select('app.id')
                    ->where($qb->expr()->in('app.appId',$appIds))
                    ->getQuery()
                    ->getResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        return $result;
    }

    public function getDistinctAppId($app_ids)
    {
        $rsm = new ResultSetMapping();

        $conn = $this->_em->getConnection();
        $stmt = $conn->prepare("SELECT DISTINCT app_id, app_name FROM applications WHERE app_id IN ($app_ids);");
        $stmt->execute();
        $result =$stmt->fetchAll();
        return $result;
    }

    public function getAppByIds(array $ids, $return_field)
    {
        $qb = $this->createQueryBuilder('applications');
        $query = $qb->select('DISTINCT applications.' . "$return_field")
                    ->where($qb->expr()->in('applications.appId','?1'))
                    ->setParameter(1,$ids)->getQuery();
        $result = $query->getResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);

        $result = array_column($result,"$return_field");

        $AppIds = implode(',',$result);

        $AppIds = array_unique(explode(',',$AppIds));

        return $AppIds;
    }

    public function getListDataFromIdentifier($listIdentifier = array())
    {
        if (empty($listIdentifier)) {
            return;
        }
        $qb = $this->createQueryBuilder('a')
                ->select('a.id AS id,a.appId AS app_id');
        $listIdentifier = array_unique($listIdentifier);
        $qb->where($qb->expr()->in('a.id', $listIdentifier));

        return $qb->getQuery()->getResult();
    }

    public function getListAppByAppId($listAppId)
    {
        if (is_array($listAppId)) {
            $listAppId = implode("','", $listAppId);
        }
        $query = "
            SELECT *
            FROM (
                SELECT app_id
                    ,app_name
                    ,platform
                    ,row_number() OVER (PARTITION BY app_id) AS rn
                FROM  applications
            ) AS a
            WHERE a.rn = 1 AND a.app_id IN ('$listAppId');
        ";
        $stmt = $this->_em->getConnection()->prepare($query);
        $stmt->execute();

        return $stmt->fetchAll();
    }

    public function countDeviceByPlatform()
    {
        $query = "
            SELECT app_id
              ,platform
              ,(
                SELECT APPROXIMATE COUNT(DISTINCT t1.device_id)
                FROM actions t1
                WHERE t.app_id=t1.app_id
              ) AS device_count
            FROM (
                  SELECT app_id,platform FROM applications GROUP BY app_id,platform
                 ) t
        ";
        $stmtQueryGroup = $this->_em->getConnection()->prepare("set query_group to 'ak_low_priority_long_processing_time';");
        $stmtQueryGroup->execute();
        $stmt = $this->_em->getConnection()->prepare($query);
        $stmt->execute();
        $stmtQueryGroup = $this->_em->getConnection()->prepare("reset query_group;");

        return $stmt->fetchAll();
    }
}