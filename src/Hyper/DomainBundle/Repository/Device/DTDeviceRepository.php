<?php

namespace Hyper\DomainBundle\Repository\Device;

use Doctrine\ORM\EntityRepository;
use Hyper\Domain\Device\DeviceRepository;
use Hyper\Domain\Device\Device;

use Doctrine\ORM\Query\ResultSetMapping;

/**
 * DeviceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DTDeviceRepository extends EntityRepository implements DeviceRepository
{
    public function save(Device $device){
        $this->_em->persist($device);
        //$this->_em->flush();
    }

    public function findDeviceByPlatform($platform){
        $rsm = new ResultSetMapping;
        // Equivalent DQL query: "select u from User u where u.name=?1"
        $rsm->addEntityResult('Hyper\Domain\Device\Device', 'd');
        $rsm->addFieldResult('d', 'id', 'id');
        $rsm->addFieldResult('d', 'city', 'city');

        $query = $this->_em->createNativeQuery("SELECT id FROM Devices WHERE city = ? and platform='2'", $rsm);
        $query->setParameter(1, 'hcm');

        $devices = $query->getSingleResult();
        return $devices;
    }

    public function getActiveCountries(array $appIds = array()) {
        if (!empty($appIds)){
            //print_r($ap)
            $sqb = $this->_em->getRepository('\Hyper\Domain\Action\Action')->createQueryBuilder('action');
            $dql = $sqb->select('Identity(action.device)')
                        ->distinct()
                        ->where($sqb->expr()->in('action.appId','?1'))->getDQL();
            $qb= $this->createQueryBuilder('de');
            $devices = $qb->select('de.countryCode')
                        ->distinct()
                        ->orderBy('de.countryCode','ASC')
                        ->where($qb->expr()->in('de.id',$dql))
                        ->getQuery()
                        ->setParameter(1,$appIds)
                        ->getResult();
        } else {
            $devices = $this->createQueryBuilder('de')->select('de.countryCode')->distinct()->orderBy('de.countryCode','ASC')->getQuery()->getResult();
        }
        return $devices;
    }

    public function getPlatformId($id){
        $androidRepo = $this->_em->getRepository('Hyper\Domain\Device\AndroidDevice');
        $iosRepo = $this->_em->getRepository('Hyper\Domain\Device\IOSDevice');
        $sqb = $androidRepo->createQueryBuilder('android');
        $subQuery = $sqb->select('android.advertisingId')
                             ->where($sqb->expr()->eq('android.device','?1'))
                             ->setParameter(1,$id)
                            //  ->setMaxResults(1)
                             ;
        $sqb2 = $iosRepo->createQueryBuilder('ios');
        $subQuery2 = $sqb2->select('ios.idfv')
                             ->where($sqb2->expr()->eq('ios.device','?1'))
                             ->setParameter(1,$id)
                            //  ->setMaxResults(1)
                             ;


        $qb = $this->createQueryBuilder('de');

        $query = $qb->select('de.platform')
                    ->addSelect( "(".$subQuery->getDQL().") as android_advertising_id" )
                    ->addSelect("(".$subQuery2->getDQL().") as ios_idfv" )
                    ->where($qb->expr()->eq('de.id','?1'))
                    ->setParameter(1,$id)
                    ->getQuery();
                    // ->getSingleResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);

        try
        {
            $result = $query->getSingleResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);
        }
        catch (\Doctrine\ORM\NoResultException $e) {
            $result = array();
        }
        return $result;
    }

    public function countDeviceByCountry($listAppId = '')
    {
        if (is_array($listAppId)) {
            $listAppId = implode("','", $listAppId);
        }
        $appIdWhere = '';
        if (!empty($listAppId)) {
            $appIdWhere .= "app_id IN ('$listAppId') ";
        }
        $query = "
            SELECT
              country_code
              ,(
                SELECT APPROXIMATE COUNT(DISTINCT d1.id) AS android_count
                FROM devices d1
                LEFT JOIN actions ON d1.id = actions.device_id
                WHERE d.country_code = d1.country_code
                  AND d1.platform = ".Device::ANDROID_PLATFORM_CODE."
                  ".($appIdWhere ? " AND $appIdWhere" : "")."
              )
              ,(
                SELECT APPROXIMATE COUNT(DISTINCT d1.id) AS ios_count
                FROM devices d1
                LEFT JOIN actions ON d1.id = actions.device_id
                WHERE d.country_code = d1.country_code
                  AND d1.platform = ".Device::IOS_PLATFORM_CODE."
                  ".($appIdWhere ? " AND $appIdWhere" : "")."
              )
            FROM (
              SELECT devices.country_code
              FROM devices
                LEFT JOIN actions ON devices.id = actions.device_id
              ".($appIdWhere ? " WHERE $appIdWhere" : "")."
              GROUP BY country_code
            ) d
        ";
        $stmtQueryGroup = $this->_em->getConnection()->prepare("set query_group to 'ak_low_priority_long_processing_time';");
        $stmtQueryGroup->execute();
        $stmt = $this->_em->getConnection()->prepare($query);
        $stmt->execute();
        $stmtQueryGroup = $this->_em->getConnection()->prepare("reset query_group;");
        $stmtQueryGroup->execute();

        return $stmt->fetchAll();
    }

    public function getDeviceForEs($deviceIds = [])
    {
        $sql = "SELECT devi.* FROM devices AS devi ";
        if (!empty($deviceIds)) {
            $deviceIds = implode("','", $deviceIds);
            $sql .= "WHERE devi.id IN ('$deviceIds')";
        }
        $em = $this->_em;
        $statement = $em->getConnection()->prepare($sql);
        $statement->execute();
        $rs = $statement->fetchAll();
        return $rs;
    }

}