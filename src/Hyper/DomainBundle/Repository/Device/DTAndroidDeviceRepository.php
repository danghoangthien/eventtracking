<?php

namespace Hyper\DomainBundle\Repository\Device;

use Doctrine\ORM\EntityRepository;
use Hyper\Domain\Device\AndroidDeviceRepository;
use Hyper\Domain\Device\Device;
use Hyper\Domain\Device\AndroidDevice;

/**
 * DeviceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DTAndroidDeviceRepository extends EntityRepository implements AndroidDeviceRepository
{
    public function save(AndroidDevice $androidDevice){
        $this->_em->persist($androidDevice);
        //$this->_em->flush();
    }
    /*
    public function getByIdentifier($identifier) {
        if (!array_key_exists('android_id',$identifier) || !array_key_exists('advertising_id',$identifier)){
            throw new \Exception('invalid identifier');
        }
        $androidDevice = null;
        $androidId = $identifier['android_id'];
        $advertisingId = $identifier['advertising_id'];
        
        if (!empty($androidId)){
            $androidDevice = $this->getByAndroidId($androidId);
        }
       
        if (!$androidDevice instanceof AndroidDevice) {
            if(!empty($advertisingId)) {
                $androidDevice = $this->getByAdvertisingId($advertisingId);
            }
        }
        return $androidDevice;
    }
    */
    public function getByAdvertisingId($advertisingId) {
        return $this->findOneBy(
            array('advertisingId' => $advertisingId)  
        );
    }
    public function getByAndroidId($androidId) {
        return $this->findOneBy(
            array('androidId' => $androidId)  
        );
    }
    
    /**
     * return array contains deviceId
     */
    public function getByIdentifier($identifier) {
        if (!array_key_exists('android_id',$identifier) || !array_key_exists('advertising_id',$identifier)){
            throw new \Exception('invalid identifier');
        }
        $result = null;
        $androidId = $identifier['android_id'];
        $advertisingId = $identifier['advertising_id'];
        $qb = $this->createQueryBuilder('ad');
        try {
            if (empty($androidId)) {
                $result = $qb->select('IDENTITY(ad.device) as device_id')
                        ->where(
                            $qb->expr()->eq('ad.advertisingId','?1')
                        )
                        ->orderBy('ad.created','desc')
                        ->setParameter(1,$advertisingId)
                        ->setMaxResults(1)
                        ->getQuery()
                        ->getSingleResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);
            } elseif (empty($advertisingId)) {
                $result = $qb->select('IDENTITY(ad.device) as device_id')
                        ->where(
                            $qb->expr()->eq('ad.androidId','?1')
                        )
                        ->orderBy('ad.created','desc')
                        ->setParameter(1,$androidId)
                        ->setMaxResults(1)
                        ->getQuery()
                        ->getSingleResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);
            } else {
                $result = $qb->select('IDENTITY(ad.device) as device_id')
                        ->where($qb->expr()->andX(
                            $qb->expr()->eq('ad.androidId','?1'),
                            $qb->expr()->eq('ad.advertisingId','?2')
                        ))
                        ->orderBy('ad.created','desc')
                        ->setParameter(1,$androidId)
                        ->setParameter(2,$advertisingId)
                        ->setMaxResults(1)
                        ->getQuery()
                        ->getSingleResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);
            }
                
        } catch (\Doctrine\ORM\NoResultException $ex) {
            //echo "NoResultException";
            $result = null;
        } catch (\Doctrine\ORM\NonUniqueResultException $nonUnique) {
            echo " duplicated ID ";
            $result = null;
            // TODO - report in audit log
        }                   
                            
        return $result;
        
    }
    
    public function getListDataFromIdentifier($listIdentifier = array())
    {
        if (empty($listIdentifier)) {
            return;
        }
        $qb = $this->createQueryBuilder('ad')
                ->select('IDENTITY(ad.device) AS id')
                ->distinct();
        $listIdentifier = array_unique($listIdentifier);
        $qb->where($qb->expr()->in('id', $listIdentifier));
        
        return $qb->getQuery()->getResult();
    }
}