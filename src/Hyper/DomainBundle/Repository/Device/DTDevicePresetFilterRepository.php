<?php

namespace Hyper\DomainBundle\Repository\Device;

use Doctrine\ORM\EntityRepository;
use Hyper\Domain\Device\DevicePresetFilterRepository;
use Hyper\Domain\Device\DevicePresetFilter;

/**
 * DTDevicePresetFilterRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DTDevicePresetFilterRepository extends EntityRepository implements DevicePresetFilterRepository
{
    /**
     * get device in PresetFilter which not removed manually ,has status !=-1
     */
    public function findByDeviceId($deviceId, $authId)
    {
        $query = "
            SELECT dashboard_preset_filters.id
            , dashboard_preset_filters.preset_name
            , dashboard_preset_filters.card_bg_color_code
            , dashboard_preset_filters.card_text_color_code

            FROM device_preset_filter
                INNER JOIN dashboard_preset_filters ON (dashboard_preset_filters.id=device_preset_filter.preset_filter_id)

            WHERE dashboard_preset_filters.authentication_id = :auth_id
                AND device_preset_filter.device_id = :device_id
                AND status NOT IN (-1)
        ";
        $stmt = $this->_em->getConnection()->prepare($query);
        $stmt->bindValue('auth_id', $authId);
        $stmt->bindValue('device_id', $deviceId);
        $stmt->execute();

        return $stmt->fetchAll(0);
    }

    public function findNotContainsDeviceId($deviceId, $authId)
    {
        $query = "
            SELECT id , preset_name , card_bg_color_code , card_text_color_code
            FROM dashboard_preset_filters
            WHERE   authentication_id = :auth_id
                AND
                    id NOT IN (
                        SELECT  preset_filter_id
                        FROM device_preset_filter
                        WHERE   device_id = :device_id
                            AND
                                status NOT IN (-1)
                        GROUP BY preset_filter_id
                    )
            ;
        ";
        //echo "$query";die;
        $stmt = $this->_em->getConnection()->prepare($query);
        $stmt->bindValue('auth_id', $authId);
        $stmt->bindValue('device_id', $deviceId);
        $stmt->execute();


        return $stmt->fetchAll(0);
    }

    public function deleteByDeviceIdPresetFilterId($deviceId, $presetFilterId)
    {
        $query = "
            DELETE FROM device_preset_filter
            WHERE device_id = :device_id AND preset_filter_id = :preset_filter_id
        ";
        $stmt = $this->_em->getConnection()->prepare($query);
        $stmt->bindValue('device_id', $deviceId);
        $stmt->bindValue('preset_filter_id', $presetFilterId);
        return $stmt->execute();
    }

    public function detach($deviceId, $presetFilterId)
    {
        $this->changeDeviceIdPresetFilterIdStatus($deviceId, $presetFilterId,-1);
    }

    public function attach($deviceId, $presetFilterId)
    {
        $this->changeDeviceIdPresetFilterIdStatus($deviceId, $presetFilterId,1);
    }

    private function changeDeviceIdPresetFilterIdStatus($deviceId, $presetFilterId,$status)
    {
        $query = "
            UPDATE device_preset_filter
            SET status = :status
            WHERE device_id = :device_id AND preset_filter_id = :preset_filter_id
        ";
        $stmt = $this->_em->getConnection()->prepare($query);
        $stmt->bindValue('status', $status);
        $stmt->bindValue('device_id', $deviceId);
        $stmt->bindValue('preset_filter_id', $presetFilterId);
        return $stmt->execute();
    }

    /**
     * add new instance of DevicePresetFilterId that have status = 1
     */
    public function add($deviceId, $presetFilterId)
    {
        $query = " insert INTO device_preset_filter (device_id,preset_filter_id,status) VALUES (:device_id,:preset_filter_id,1)";
        $stmt = $this->_em->getConnection()->prepare($query);
        $stmt->bindValue('device_id', $deviceId);
        $stmt->bindValue('preset_filter_id', $presetFilterId);
        return $stmt->execute();
    }
}