<?php

namespace Hyper\DomainBundle\Repository\Currency;

use Doctrine\ORM\EntityRepository;
use Hyper\Domain\Currency\CurrencyRepository;
use Hyper\Domain\Currency\Currency;
use Hyper\Domain\Currency\CurrencyException;

/**
 * CurrencyRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DTCurrencyRepository extends EntityRepository implements CurrencyRepository
{
    public function convert($from_currency = 'sgd', $amount = 0) {

		//$date 			= new \DateTime(date('Y-m').'-1 00:00:00');
        $from_currency 	= strtolower($from_currency);
		$amount 		= (float)($amount);
        /*
		$q = Doctrine::getTable('currency')->createQuery('c')
		  	->where('c.timestamps	>= ?', $date)
			->andWhere('c.name		= ?', $from_currency)
			->limit(1);
		*/	
		$currency =  $this->findOneBy(
            array(
                'name' => $from_currency
            )  
        );
        
		if($currency instanceof Currency ) {
		        $rate = $currency->getRate();
		        //echo "rate : ".$rate;
		        /* ORIGINAL CODE
			    $result = (float) ($amount/$rate);
			    $result = round($result,2);
			    */
			    
			    /* ADDED 2015-12-16 : paul.francisco
			    *  to display 5 decimals if the $result is less than 1
			    */
			    $result = (float) ($amount/$rate);
			    
			    $value = explode(".", $result);
			    
			    if($value[0] < 1)
			    {
			    	$result = round($result,5);
			    }
			    else
			    {
			    	$result = round($result,2);
			    }
			    
			    //echo "converted  : ".$result;
			    return $result;
		} else {
		    throw CurrencyException::notExisted($from_currency);
		}
    }
    
    public function findbyCriteria($field, $value)
    {
        $record = $this->findOneBy(array($field => $value));
        return $record;
    }
}
